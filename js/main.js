!function(e){e(document).ready(function(){"pgp.help"!=window.location.host&&"gaff.github.io"!=window.location.host||"https:"==window.location.protocol||(window.location.protocol="https")})}(jQuery);var pgpApp=angular.module("pgpApp",["ngAnimate","ui.router","ui.bootstrap"]);pgpApp.directive("autoselectall",["$window",function(e){return{restrict:"C",link:function(t,n,o){n.on("click",function(){e.getSelection().toString()||this.select()}),n.on("blur",function(){n.scrollTop(0)})}}}]),pgpApp.directive("focusOn",function(){return function(e,t,n){e.$on("focusOn",function(e,o){o===n.focusOn&&t[0].focus()})}}),pgpApp.factory("focus",["$rootScope","$timeout",function(e,t){return function(n){t(function(){e.$broadcast("focusOn",n)})}}]),pgpApp.config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/import"),e.state("permalink",{url:"/permalink?{pgp}",templateUrl:"templates/keyWork.html",controller:"KeyWorkCtrl",params:{pgp:null}}).state("key",{url:"/",templateUrl:"templates/keyWork.html",controller:"KeyWorkCtrl",params:{key:null,"private":null}}).state("import",{url:"/import?{pgp}",templateUrl:"templates/keyWork.html",controller:"KeyWorkCtrl",params:{key:null,"private":null,pgp:null}}).state("generate",{url:"/generate",templateUrl:"templates/keyGenerator.html",controller:"KeyGenerator"}).state("intro",{url:"/intro",templateUrl:"templates/intro.html"})}]),pgpApp.config(["$compileProvider",function(e){e.aHrefSanitizationWhitelist(/^\s*(https?|data|mailto):/)}]),pgpApp.controller("KeyListCtrl",["$scope","$location","$modal",function(e,t,n){e.$location=t,e.getUser=function(e){return e?"alias"in e?e.alias:"primaryKey"in e?e.getPrimaryUser().user.userId.userid:(console.log("Ooops - no idea what this key is:"),console.log(e),"Unknown key!"):""},e.getFingerprint=function(e){return e?"primaryKey"in e?e.primaryKey.fingerprint:void 0:""},e.getKeyId=function(e){return e?"primaryKey"in e?e.primaryKey.getKeyId().toHex():void 0:""},e.addOrUpdateKey=function(t){var n=e.getFingerprint(t),o=null;if(t.isPrivate()){var a=e.keyring.privateKeys.getForId(n);a?(key=a,key.update(t),o=key):(e.keyring.privateKeys.push(t),o=t)}else{var a=e.keyring.publicKeys.getForId(n);a?(key=a,key.update(t),o=key):(e.keyring.publicKeys.push(t),o=t)}return o},e.allKeys=function(){return e.keyring.getAllKeys()},e.publicKeys=function(){return e.keyring.publicKeys.keys},e.privateKeys=function(){return e.keyring.privateKeys.keys},e.keyring=new openpgp.Keyring,e.workstarted=e.allKeys().length>0?!0:!1,e.skipintro=e.allKeys().length>2?!0:!1,e.persist=e.workstarted,e.stored=e.persist,pgpkeys=openpgp.key.readArmored(myKey),openpgp.config.commentstring="https://pgp.help",e.addOrUpdateKey(pgpkeys.keys[0]),e.findKey=function(t,n){return t?n?e.keyring.privateKeys.getForId(t):e.keyring.publicKeys.getForId(t):null},e.$watch("$viewContentLoaded",function(){}),e.$watch("persist",function(){e.persist&&(e.workstarted=!0),e.saveKeys()}),e.isPrivate=function(e){return e?e.isPrivate():!1},e.isDecrypted=function(e){return e?e.primaryKey.isDecrypted:!1},e.$on("persist",function(t){e.persist=!0}),e.$on("newkey",function(t,n){e.addOrUpdateKey(n);n.isPrivate()&&(e.newidentityopts=!1,e.workstarted=!0),e.allKeys().length>1&&(e.workstarted=!0),e.allKeys().length>2&&(e.skipintro=!0),e.saveKeys()}),e.$on("deletekey",function(t,n){var o=e.getFingerprint(n);n.isPrivate()?e.keyring.privateKeys.removeForId(o):e.keyring.publicKeys.removeForId(o),e.saveKeys()}),e.loadKeys=function(){var e=new openpgp.Keyring;console.log(e)},e.saveKeys=function(){e.persist&&(e.keyring.store(),e.stored=!0)},e.purgeKeys=function(){var t=n.open({animation:e.animationsEnabled,templateUrl:"templates/chickenBox.html",controller:"chickenBoxCtrl",size:"lg",resolve:{content:function(){return{title:"Delete ALL key data!",danger:e.privateKeys().length>0}}}});t.result.then(function(t){e.keyring.clear(),e.keyring.store(),e.stored=!1,e.$state.go("key",{key:null,"private":!1})},function(){})}}]),pgpApp.controller("KeyWorkCtrl",["$scope","focus","$state","$stateParams","$modal",function(e,t,n,o,a){e.key=null,e.$stateParams=o,e.$state=n,e.init=function(){"pgp"in o&&o.pgp?(e.rawkey=decodeURIComponent(o.pgp),key=e.loadKey_raw(),key&&(e.key=key,t("message"))):(e.key=e.findKey(o.key,o["private"]),e.isNewKey()?(e.rawkey="",t("pgppub")):e.isPrivateKey()?(e.rawkey=e.key.toPublic().armor(),e.rawkey_private=e.key.armor(),t(e.isDecryptedKey()?"pmessage":"passphrase")):(e.rawkey=e.key.armor(),t("message")))},e.isNewKey=function(){return null==e.key},e.isPrivateKey=function(){return e.key?e.isPrivate(e.key):e.$stateParams["private"]},e.isDecryptedKey=function(){return e.key?e.isDecrypted(e.key):!1},e.deleteKey=function(){var t=a.open({animation:e.animationsEnabled,templateUrl:"templates/chickenBox.html",controller:"chickenBoxCtrl",size:"lg",resolve:{content:function(){return{title:"Delete key data",danger:e.isPrivateKey()}}}});t.result.then(function(t){e.$emit("deletekey",e.key),e.$state.go("key",{key:null,"private":!1})},function(){})},e.mailit=function(){var t=e.getUser(e.key).match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\b/);if(!t)return"";var n=t[0],o=e.resulttext;return"mailto:"+n+"?subject="+encodeURIComponent("Sent from pgp.help")+"&body="+encodeURIComponent(o)},e.encodeURIComponent=function(e){var t=encodeURIComponent(e);return t},e.loadKey_raw=function(){var n;try{var n=openpgp.key.readArmored(e.rawkey)}catch(o){return e.pgperror=!0,null}if(n.err)return e.pgperror=!0,null;for(e.pgperror=!1,key=n.keys[n.keys.length-1],e.smartfade="smartfade",t("message"),i=0;i<n.keys.length;i++)e.$emit("newkey",n.keys[i]);return key},e.loadKey=function(){if(key=e.loadKey_raw(),key){var t={key:e.getFingerprint(key),"private":e.isPrivate(key)};e.$state.go("key",t)}},e.encryptMessage=function(){e.resulttext="",e.message&&!e.isNewKey()&&openpgp.encryptMessage(e.key,e.message).then(function(t){e.resulttext=t,e.$apply()})["catch"](function(t){e.resulttext=t,e.$apply()})},e.applyPassword=function(){if(e.passworderror=!1,e.password){var n=e.key.decrypt(e.password);e.passworderror=!n,n&&(e.password="",t("pmessage")),n&&e.pmessage&&e.decryptMessage()}},e.blockquote=function(e){var t="    "+e.replace(/\n/g,"\n    ");return t},e.decryptMessage=function(){if(e.resulttext="",e.pmessageerror=!1,!e.isNewKey()&&e.pmessage){var n;try{n=openpgp.message.readArmored(e.pmessage)}catch(o){return e.resulttext=o.message,void(e.pmessageerror=!0)}return e.isDecryptedKey()?void openpgp.decryptMessage(e.key,n).then(function(t){e.resulttext=t,e.$apply()})["catch"](function(t){e.resulttext=t.message,e.$apply()}):void t("passphrase")}},e.init()}]),pgpApp.controller("KeyGenerator",["$scope","$state","focus",function(e,t,n){e.working=!1,e.$state=t,e.generateKeyPair=function(){var t;t=e.user?e.email?e.user+" <"+e.email+">":e.user:e.email;var n={numBits:2048,userId:t,passphrase:e.passphrase};e.working=!0,openpgp.generateKeyPair(n).then(function(t){e.working=!1;var n=openpgp.key.readArmored(t.publicKeyArmored);e.$emit("persist"),e.$emit("newkey",n.keys[0]),e.$emit("newkey",t.key),e.$state.go("key",{key:e.getFingerprint(t.key),"private":!0})})["catch"](function(t){e.working=!1,console.log(t),e.$apply()})}}]),pgpApp.controller("chickenBoxCtrl",["$scope","$modalInstance","content",function(e,t,n){e.content=n,e.ok=function(){t.close(!0)},e.cancel=function(){t.dismiss("cancel")}}]);var myKey=["-----BEGIN PGP PUBLIC KEY BLOCK-----","Version: OpenPGP.js v1.2.0","Comment: https://pgp.help","","xsBNBFW7TH8BCADccz73OFQprAsBLNTFNZFTPzDUbmwKn5BMFFK7rYf7v8Gj","PyYQrl9DupBTiP6ISyTIvn/pT0/+G1yTYzliej4UZP7LOUz+pg59/X2JP7Ko","3UzH9qoO3FYXl85ok/daSNRt0VrKSoGcMuoLw7CT48hHZdIXSwoPFP//n8Qo","3u1J3LghZQLPdnZfWHPA6ZKLvcgQaByCABsRrH7L75+Qw49Wb3VeBiE5u26E","j3NXUc1GskMvFHp8pUnfzFxF4sCzk/o+zqJW8NtIje48beufH4eMBF2NK6nF","1Et8ESCM7jE10rpWm+nsl8lMooQEbUXoMp2z2s2zuYmaiV+ONaa3UT6fABEB","AAHNGVBncCBIZWxwIDxoZWxsb0BwZ3AuaGVscD7CwHIEEAEIACYFAlW7TIAG","CwkIBwMCCRAj/Z8+mwZ1aQQVCAIKAxYCAQIbAwIeAQAApGkIAJCtB3PD5aka","rGPzePxmqc37cpOGx/ArO8M7ouXDkc75xt3MOMvAFB4y8lytwteXbLG50Kl0","1KHp1NkUEJM0eR8SxGaPipEgN0PRoEDhN8VgR3m4Lq5RlTMFq1yXQgjPGndB","sP+KIDSfBEPZOlMW9VgdzThjqj8WqVxvaoRPbazLpS+WYrGTx4WjcsoS53ou","b7Fd6rkOdZcbgmUooDHRiNSNJq+RCwZnffxLlJQp3r3U0Ll4Mrsb/pxcOjde","7Cnc1SildK3m5iIuteGSIl8qXXTidcw5vV9w1xDLu7mPztaXlM72KaVkuhJN","/mSaCFTAAgECmvgP88ByG0uDu4SpeFrOwE0EVbtMfwEIAM/+tJfjT8ER4qe0","VJJPCqAcUffyXyABnN4NymDxz97ol9xwi2boTb2oDtTkAXmTU5pKKOjZFtV1","FizpVemVoGWBnmEZBaOUMZy2qFEIHrPh0OWaiuCSr+m/VjvOWota//bJZg1H","/o9JaMXSefE+lWak/BZagMAX/EOWUfzYfNSfHViua5HxKA5PoQ7Blcxt7T1f","5427XhoSpZzdbi9XjlYZmFlQ08MYG18wTVa6g8MJ7qr9TIVZPRnSrtE15iP1","8py3tXn97PToLd78ZkTfnlKZwrMxuFHcNCHMpVbEXD6zVWATeMMNRo5an3kg","dE9+9odr2zZWdJgnN1PDwbGKeEEAEQEAAcLAXwQYAQgAEwUCVbtMgQkQI/2f","PpsGdWkCGwwAAL2qCACSkHd3SDv1XTJJcwsazkXr+NMJaNSN7qQFPMboDS0Z","3pX27Rn1ev1UHTqFKBYgogxyeUOnbeXE+VAFYuoeNCbFYY1TFhvGVWRax/rf","PBuVQ4d1+g87nxSL3JFwvSGzTjPkJiU+rGOIkOqYK0JA/T8+ZqrXTQoH2d7i","r1vldA2CakQ+Mf+BjHjG06doQlrbuGBYXLWJbATpcKmK++kWaGE01h5rFbx8","JmS3SZME1N2bdm99TJVzbWbHqcJge/1lfEY1PecjweX2McXQEVGmZLPdN6dF","HLrZ5SS/qnXSXE79odO4Cd/gx1nJrovmut1vZfxh3yyLOnh9+BZX/NeU9FWu","","=MMEa","-----END PGP PUBLIC KEY BLOCK-----"].join("\n");angular.module("pgpApp").run(["$templateCache",function(e){e.put("templates/chickenBox.html",'<div class="modal-header">\n  <button type="button" class="close" data-dismiss="modal">&times;</button>\n  <h4 class="modal-title">{{content.title}}</h4>\n</div>\n<div class="modal-body">\n  <div class="panel panel-danger" ng-show="content.danger">\n    <div class="panel-heading">\n      <h3 class="panel-title">This action is irreversible!</h3>\n    </div>\n    <div class="panel-body">\n      <p>This will permanently delete the key data! There will be no way to recover this identity unless YOU made a backup.</p>\n      <p>Are you sure you wish to do this?</p>\n    </div>\n  </div>\n  <div ng-show="!content.danger">\n    Are you sure? This action cannot be reversed.\n  </div>\n</div>\n<div class="modal-footer">\n  <button type="button" class="btn" ng-class="content.danger ? \'btn-danger\' : \'btn-warning\'" ng-click="ok()">Delete!</button>\n  <button type="button" class="btn btn-default" ng-click="cancel()">Cancel</button>\n</div>'),e.put("templates/intro.html",'<div class="jumbotron">\n  <h1>Get started with PGP</h1>\n  <p class="lead">This website helps you send encrypted messages using PGP.</p>\n</div>\n<div class="row">\n  <div class="col-lg-4">\n    <h3>Send a PGP Message</h3>\n    <p>If you want to send an encrypted message and already have their PGP key it&#8217;s really simple:<p>\n    <ol>\n      <li>Paste their PGP key into the form.</li>\n      <li>Type your message.</li>\n      <li>Copy the encrypted result and send it to your recipient</li>\n    </ol>\n    <p>\n      <a class="btn btn-primary" ui-sref="key">Get Started »</a>\n    </p>\n  </div>\n  <div class="col-lg-4">\n    <h3>Don&#8217;t have a PGP key?</h3>\n    <p>You need to ask your recipient for their key, or suggest they go to <a href="https://pgp.help/generate">pgp.help</a> to generate one themselves.</p>\n    <p>If you want to try out PGP why not use our key to send us a message?</p>\n    <p>\n      <a class="btn btn-primary" ui-sref="key({key:\'1dfa77312bac1781f699e78223fd9f3e9b067569\'})">Send us a Message »</a>\n    </p>\n  </div>\n  <div class="col-lg-4">\n    <h3>Want to Receive Messages?</h3>\n    <p>We can generate a PGP key pair for you and store it inside your browser</p>\n    <p>\n      <a class="btn btn-primary" ui-sref="generate">Generate private key »</a>\n    </p>\n  </div>\n</div>\n<div id="#what" class="row">\n  <div class="col-lg-12" ng-include src="\'templates/introdoc.html\'">\n  </div> \n</div>\n'),e.put("templates/keyGenerator.html",'<form action="/" class="form-horizontal" method="get">\n  <fieldset>\n    <legend>Generate New Identity</legend>\n    <div class="form-group">\n      <label class="col-lg-2 control-label">Name</label>\n      <div class="col-lg-6 controls">\n        <div class="input-append">\n          <input class="form-control" type="text" ng-model="user"/>\n        </div>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-lg-2 control-label">Email</label>\n      <div class="col-lg-6 controls">\n        <div class="input-append">\n          <input class="form-control" type="email" ng-model="email"/>\n        </div>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-lg-2 control-label">Passphrase</label>\n      <div class="col-lg-6 controls">\n        <div class="input-append">\n          <input class="form-control" type="password" ng-model="passphrase"/>\n        </div>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-lg-2 control-label"></label>\n      <div class="col-lg-6 controls">\n        <div class="btn btn-large btn-primary" ng-show="!working" ng-click="generateKeyPair()">Generate New Key Pair</div>\n        <div class="btn btn-large btn-primary" disabled=\'true\' ng-show="working">Working...</div>\n      </div>\n    </div>\n  </fieldset>\n</form>'),e.put("templates/keyWork.html",'<!-- <pre>{{$stateParams}}</pre> -->\n<form action="/" class="form-horizontal" method="get">\n  <fieldset>\n    <legend>{{isPrivateKey() ? \'Decrypt\' : \'Encrypt\'}} Message</legend>\n\n    <div class="form-group" ng-class="[smartfade, {\'has-error\': pgperror}]" ng-show="isNewKey()">\n      <label class="col-lg-2 control-label" for="pgppub">{{isPrivateKey() ? \'Private\' : \'Public\'}} Key</label>\n      <div class="col-lg-10 controls">\n        <textarea class="form-control autoselectall" focus-on="pgppub" rows="4" spellcheck="false" placeholder="Paste PGP key here."\n          ng-model="rawkey" ng-model-options="{debounce:500}" ng-change="loadKey()"></textarea>\n      </div>\n    </div>\n    <div ng-show="!isNewKey()">\n      <div class="form-group">\n        <label class="col-lg-2 control-label" for="username">Username</label>\n        <div class="col-lg-5 controls">\n          <div class="input-append">\n            <input class="form-control" type="text" readonly="readonly" ng-value="getUser(key)"/>\n          </div>\n        </div>\n        <label class="col-lg-2 control-label" for="keyId">Key ID</label>\n        <div class="col-lg-3 controls">\n          <div class="input-append">\n            <input class="form-control autoselectall" type="text" readonly="readonly" ng-value="getKeyId(key)"/>\n          </div>\n        </div>\n      </div>\n      <div class="form-group" ng-show="isPrivateKey() && !isNewKey()">\n        <label class="col-lg-2 control-label" for="passphrase">Password</label>\n        <div class="col-lg-10 controls">\n          <div class="input-append" ng-class="{\'has-error\':passworderror}">\n            <input type="password" class="form-control" focus-on="passphrase" ng-model-options="{debounce:500}"\n              placeholder="{{isDecryptedKey() ? \'Key already decrypted\' : \'Password for private key\'}}"\n              ng-model="password" ng-change="applyPassword()" ng-readonly="isDecryptedKey()"></input>\n          </div>\n        </div>\n      </div>\n      <div class="form-group" ng-click="showdetails = !showdetails">\n        <a class="col-lg-10 col-lg-offset-2">{{showdetails ? \'Hide\' : \'Show\'}} key details\n          <span class="pull-left"><i class="glyphicon"\n              ng-class="{\'glyphicon-chevron-up\':showdetails, \'glyphicon-chevron-down\':!showdetails}"></i>\n          </span>\n        </a>\n\n      </div>\n      <div ng-show="showdetails">\n        <div class="form-group">\n          <label class="col-lg-2 control-label" for="fingerprint">Fingerprint</label>\n          <div class="col-lg-10 controls">\n            <div class="input-append">\n              <input class="form-control autoselectall" type="text" readonly="readonly" ng-value="getFingerprint(key)"/>\n            </div>\n          </div>\n        </div>\n        <div class="form-group">\n          <label class="col-lg-2 control-label">Public Key</label>\n          <div class="col-lg-10 controls">\n            <textarea class="form-control autoselectall" id="dest" readonly="readonly" rows="8"\n                placeholder="Raw PGP key.">{{applyBlockquote ? blockquote(rawkey) : rawkey}}</textarea>\n          </div>\n        </div>\n        <div class="forum-group row">\n          <div class="col-lg-10 col-lg-offset-2">\n            <a class="btn btn-default" download="publickey.txt" ng-href="data:text/plain;charset=utf-16le,{{encodeURIComponent(rawkey)}}">Save As</a>\n            <a class="btn btn-default" ng-show="isPrivateKey()" data-toggle="modal" data-target="#keyExport">Export Private Key</a>\n            <a class="btn btn-default" ng-show="workstarted" ng-click="deleteKey()">Delete Key</a>\n            <div class="pull-right">(<a ui-sref="permalink({pgp:rawkey})">permalink</a>)</div>\n          </div>\n          <!-- Modals -->\n          <div id="keyExport" class="modal fade" role="dialog">\n            <div class="modal-dialog modal-lg">\n              <!-- Modal content-->\n              <div class="modal-content">\n                <div class="modal-header">\n                  <button type="button" class="close" data-dismiss="modal">&times;</button>\n                  <h4 class="modal-title">Export Key Data</h4>\n                </div>\n                <div class="modal-body">\n                  <div class="panel panel-warning">\n                    <div class="panel-heading">\n                      <h3 class="panel-title">Do not share this data with anyone!</h3>\n                    </div>\n                    <div class="panel-body">\n                      <p>This data should be used to backup the private key, and import it to other pgp apps that you own.</p>\n                      <p>Do NOT give this data to anyone as it will allow them to read your messages, or steal your identity!</p>\n                    </div>\n                  </div>\n\n                  <div class="form-group">\n                    <label class="col-lg-2 control-label">Private Key</label>\n                    <div class="col-lg-10 controls">\n                      <textarea class="form-control autoselectall" id="dest" readonly="readonly" rows="8"\n                          placeholder="Encrypted text will appear here.">{{rawkey_private}}</textarea>\n                    </div>\n                  </div>\n                </div>\n                <div class="modal-footer">\n                  <a class="btn btn-default" download="privatekey.txt" ng-href="data:text/plain;charset=utf-16le,{{encodeURIComponent(rawkey_private)}}">Save As</a>\n                  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Modals finish here -->\n        </div>\n      </div>\n    </div>\n    <hr/>\n    <div class="form-group">\n      <label class="col-lg-2 control-label" for="src">Message</label>\n      <div class="col-lg-10 controls" ng-show="!isPrivateKey()">\n        <textarea class="form-control" focus-on="message" rows="8" spellcheck="false" placeholder="Type your mesage here."\n          ng-model="message" ng-model-options="{debounce:500}" ng-change="encryptMessage()"></textarea>\n      </div>\n      <div class="col-lg-10 controls" ng-show="isPrivateKey()" ng-class="{\'has-error\': pmessageerror}">\n        <textarea class="form-control autoselectall" focus-on="pmessage" rows="8" spellcheck="false" placeholder="Paste encrypted message here."\n          ng-model="pmessage" ng-model-options="{debounce:500}" ng-change="decryptMessage()"></textarea>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-lg-2 control-label" for="dest">Result</label>\n      <div class="col-lg-10 controls">\n        <textarea class="form-control autoselectall" id="dest" readonly="readonly" rows="8"\n            placeholder="Encrypted text will appear here.">{{applyBlockquote && !isPrivateKey() ? blockquote(resulttext) : resulttext}}</textarea>\n        <div class="checkbox" ng-show="(resulttext && !isPrivateKey() || showdetails)">\n          <label><input type="checkbox" ng-model="applyBlockquote">Markdown blockquote (for reddit etc)</label>\n        </div>       \n        <div class="pull-right" ng-show="resulttext && mailit()">(<a ng-href="{{mailit()}}">send in email</a>)</div>\n        <div>\n          <span id="hint_to">&nbsp;</span>&nbsp;\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>'),e.put("templates/introdoc.html",'<h1 id="what-is-pgp-">What is PGP?</h1>\n<p>PGP uses <a href="https://simple.wikipedia.org/wiki/Public-key_cryptography">public key cryptography</a> to allows you to send and receive encrypted messages.</p>\n<p>You may have been sent here by someone who wants you to send them an encrypted message. This is what you need to do:</p>\n<ul>\n<li>Paste their public key into the public key box.</li>\n<li>Type your message to them in the message box.</li>\n<li>Copy the encrypted message from the result box and send it back to them.</li>\n</ul>\n<p>To receive messages you need a <strong>private key</strong>. <a href="https://pgp.help/#/generate">We can generate one for you</a>.</p>\n<h1 id="how-secure-is-pgp-help-">How secure is pgp.help?</h1>\n<p>This website is designed with security in mind. No data is sent over the internet. Key data is (optionally) retained within your browser but nowhere else. However you shouldn&#39;t just take my word for it, it is important to understand the risks and how they have been managed. Here are the main risks explained:</p>\n<h3 id="can-pgp-help-steal-your-data-">Can pgp.help steal your data?</h3>\n<p>No!</p>\n<p>pgp.help uses <a href="&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;">Content Security Policy</a> headers to prohibit your browser from sending any data from this page over the internet. You can check these for yourself if you do right-click -&gt; view source. Near the top you will see something like this:</p>\n<pre><code class="lang-html">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#39;none&#39;; script-src &#39;self&#39;; style-src &#39;self&#39;; font-src &#39;self&#39;; img-src &#39;self&#39;;&quot;&gt;\n</code></pre>\n<p>The <code>default-src &#39;none&#39;</code> means &quot;don&#39;t load anything from anywhere&quot;, followed by some exceptions: <code>script-src &#39;self&#39;; style-src &#39;self&#39;; font-src &#39;self&#39;; img-src &#39;self&#39;</code> which allows this site to load up some scripts, styles, fonts, and images - but <em>only</em> from the place where this website was fetched from in the first place.</p>\n<p>If this website attempts to load data from anywhere else, or make any data connections then your browser will prevent this. It would be theoretically possible to use <a href="&quot;http://scarybeastsecurity.blogspot.co.uk/2009/12/generic-cross-browser-cross-domain.html&quot;">tricks</a> to leak data back to the pgp.help itself - but since this is hosted by github pages, which only alows for static content, it wouldn&#39;t be possible to record the data. You can monitor the connections made by pgp.help to ensure that it isn&#39;t attempting to steal data this way. If you are concerned then I suggest you use a local copy of this website to prevent this. See below.</p>\n<h3 id="could-pgp-help-be-hacked-">Could pgp.help be hacked?</h3>\n<p>It&#39;s a possibility - to prevent this use a local copy.</p>\n<p>Obviously we take steps to keep the website secure, but it&#39;s possible that someone could hack into the site and change the scripts to steal your data. If they did this they would also have to alter the CSP headers - see above.</p>\n<p>The simplest way to prevent this risk is to save a known-good copy of the website. There is a link in the footer that allows you to download and save the website locally. You can verify the CSP header manually to check that it is safe before using it (see above).</p>\n<h3 id="could-my-browser-be-hacked-">Could my browser be hacked?</h3>\n<p>It&#39;s unlikely - if you keep your browser up to date.</p>\n<p>Modern browsers that are kept up to date are relatively secure. Serious zero day exploits do happen but they are rare and get fixed quickly. Still you can minimise any risks by doing\nPGP work in a separate browser process to your regular browsing. If there is demand then I will package a standalone executable that will significantly minimise risks from browser exploits.</p>\n<h1 id="about-pgp-help">About pgp.help</h1>\n<h3 id="what-technology-does-pgp-help-use-">What technology does pgp.help use?</h3>\n<p>pgp.help is primarily built upon:</p>\n<ul>\n<li><a href="https://angularjs.org/">Angular.js</a></li>\n<li><a href="http://getbootstrap.com/">Bootstrap</a></li>\n<li><a href="http://openpgpjs.org">Openpgpjs.org</a></li>\n<li><a href="https://pages.github.com/">Github pages</a></li>\n<li><a href="https://www.cloudflare.com/">Cloudflare</a></li>\n</ul>\n<h3 id="what-about-licensing-">What about licensing?</h3>\n<p>Most components are MIT licensed. Openpgpjs is LGPL. Please refer to the github repo and individual components for full details.</p>\n<h3 id="can-i-help-with-your-project-can-you-help-with-my-project-">Can I help with your project? Can you help with my project?</h3>\n<p>I&#39;d love any help! Feel free to contact me, or just send me pull requests. Whatever makes you happy. I&#39;m especially interested if you spot any security issues. I&#39;m also looking for someone who can help me make my html / css look prettier. I am willing to pay for certain things (via Bitcoin), so please get in touch.</p>\n<p>I&#39;m currently looking for work in the security space. If you are interested or think I could help please get in touch. If you would like specific enhancements added to the site then please feel free to ask.</p>\n<h3 id="how-can-i-contact-you-what-is-your-pgp-key-">How can I contact you? What is your PGP key?</h3>\n<p>You can email me at hello@pgp.help</p>\n<p><a href="https://pgp.help/#/permalink?pgp=-----BEGIN%20PGP%20PUBLIC%20KEY%20BLOCK-----%0D%0AVersion:%20OpenPGP.js%20v1.2.0%0D%0AComment:%20https:%252F%252Fpgp.help%0D%0A%0D%0AxsBNBFW7TH8BCADccz73OFQprAsBLNTFNZFTPzDUbmwKn5BMFFK7rYf7v8Gj%0APyYQrl9DupBTiP6ISyTIvn%252FpT0%252F%2BG1yTYzliej4UZP7LOUz%2Bpg59%252FX2JP7Ko%0A3UzH9qoO3FYXl85ok%252FdaSNRt0VrKSoGcMuoLw7CT48hHZdIXSwoPFP%252F%252Fn8Qo%0A3u1J3LghZQLPdnZfWHPA6ZKLvcgQaByCABsRrH7L75%2BQw49Wb3VeBiE5u26E%0Aj3NXUc1GskMvFHp8pUnfzFxF4sCzk%252Fo%2BzqJW8NtIje48beufH4eMBF2NK6nF%0A1Et8ESCM7jE10rpWm%2Bnsl8lMooQEbUXoMp2z2s2zuYmaiV%2BONaa3UT6fABEB%0AAAHNGVBncCBIZWxwIDxoZWxsb0BwZ3AuaGVscD7CwHIEEAEIACYFAlW7TIAG%0ACwkIBwMCCRAj%252FZ8%2BmwZ1aQQVCAIKAxYCAQIbAwIeAQAApGkIAJCtB3PD5aka%0ArGPzePxmqc37cpOGx%252FArO8M7ouXDkc75xt3MOMvAFB4y8lytwteXbLG50Kl0%0A1KHp1NkUEJM0eR8SxGaPipEgN0PRoEDhN8VgR3m4Lq5RlTMFq1yXQgjPGndB%0AsP%2BKIDSfBEPZOlMW9VgdzThjqj8WqVxvaoRPbazLpS%2BWYrGTx4WjcsoS53ou%0Ab7Fd6rkOdZcbgmUooDHRiNSNJq%2BRCwZnffxLlJQp3r3U0Ll4Mrsb%252FpxcOjde%0A7Cnc1SildK3m5iIuteGSIl8qXXTidcw5vV9w1xDLu7mPztaXlM72KaVkuhJN%0A%252FmSaCFTAAgECmvgP88ByG0uDu4SpeFrOwE0EVbtMfwEIAM%252F%2BtJfjT8ER4qe0%0AVJJPCqAcUffyXyABnN4NymDxz97ol9xwi2boTb2oDtTkAXmTU5pKKOjZFtV1%0AFizpVemVoGWBnmEZBaOUMZy2qFEIHrPh0OWaiuCSr%2Bm%252FVjvOWota%252F%252FbJZg1H%0A%252Fo9JaMXSefE%2BlWak%252FBZagMAX%252FEOWUfzYfNSfHViua5HxKA5PoQ7Blcxt7T1f%0A5427XhoSpZzdbi9XjlYZmFlQ08MYG18wTVa6g8MJ7qr9TIVZPRnSrtE15iP1%0A8py3tXn97PToLd78ZkTfnlKZwrMxuFHcNCHMpVbEXD6zVWATeMMNRo5an3kg%0AdE9%2B9odr2zZWdJgnN1PDwbGKeEEAEQEAAcLAXwQYAQgAEwUCVbtMgQkQI%252F2f%0APpsGdWkCGwwAAL2qCACSkHd3SDv1XTJJcwsazkXr%2BNMJaNSN7qQFPMboDS0Z%0A3pX27Rn1ev1UHTqFKBYgogxyeUOnbeXE%2BVAFYuoeNCbFYY1TFhvGVWRax%252Frf%0APBuVQ4d1%2Bg87nxSL3JFwvSGzTjPkJiU%2BrGOIkOqYK0JA%252FT8%2BZqrXTQoH2d7i%0Ar1vldA2CakQ%2BMf%2BBjHjG06doQlrbuGBYXLWJbATpcKmK%2B%2BkWaGE01h5rFbx8%0AJmS3SZME1N2bdm99TJVzbWbHqcJge%252F1lfEY1PecjweX2McXQEVGmZLPdN6dF%0AHLrZ5SS%252FqnXSXE79odO4Cd%252Fgx1nJrovmut1vZfxh3yyLOnh9%2BBZX%252FNeU9FWu%0A%0D%0A%3DMMEa%0D%0A-----END%20PGP%20PUBLIC%20KEY%20BLOCK-----%0D%0A%0D%0A">Here is a link to my key</a></p>\n<p>And here it is in verbatim:</p>\n<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: OpenPGP.js v1.2.0\nComment: https://pgp.help\n\nxsBNBFW7TH8BCADccz73OFQprAsBLNTFNZFTPzDUbmwKn5BMFFK7rYf7v8Gj\nPyYQrl9DupBTiP6ISyTIvn/pT0/+G1yTYzliej4UZP7LOUz+pg59/X2JP7Ko\n3UzH9qoO3FYXl85ok/daSNRt0VrKSoGcMuoLw7CT48hHZdIXSwoPFP//n8Qo\n3u1J3LghZQLPdnZfWHPA6ZKLvcgQaByCABsRrH7L75+Qw49Wb3VeBiE5u26E\nj3NXUc1GskMvFHp8pUnfzFxF4sCzk/o+zqJW8NtIje48beufH4eMBF2NK6nF\n1Et8ESCM7jE10rpWm+nsl8lMooQEbUXoMp2z2s2zuYmaiV+ONaa3UT6fABEB\nAAHNGVBncCBIZWxwIDxoZWxsb0BwZ3AuaGVscD7CwHIEEAEIACYFAlW7TIAG\nCwkIBwMCCRAj/Z8+mwZ1aQQVCAIKAxYCAQIbAwIeAQAApGkIAJCtB3PD5aka\nrGPzePxmqc37cpOGx/ArO8M7ouXDkc75xt3MOMvAFB4y8lytwteXbLG50Kl0\n1KHp1NkUEJM0eR8SxGaPipEgN0PRoEDhN8VgR3m4Lq5RlTMFq1yXQgjPGndB\nsP+KIDSfBEPZOlMW9VgdzThjqj8WqVxvaoRPbazLpS+WYrGTx4WjcsoS53ou\nb7Fd6rkOdZcbgmUooDHRiNSNJq+RCwZnffxLlJQp3r3U0Ll4Mrsb/pxcOjde\n7Cnc1SildK3m5iIuteGSIl8qXXTidcw5vV9w1xDLu7mPztaXlM72KaVkuhJN\n/mSaCFTAAgECmvgP88ByG0uDu4SpeFrOwE0EVbtMfwEIAM/+tJfjT8ER4qe0\nVJJPCqAcUffyXyABnN4NymDxz97ol9xwi2boTb2oDtTkAXmTU5pKKOjZFtV1\nFizpVemVoGWBnmEZBaOUMZy2qFEIHrPh0OWaiuCSr+m/VjvOWota//bJZg1H\n/o9JaMXSefE+lWak/BZagMAX/EOWUfzYfNSfHViua5HxKA5PoQ7Blcxt7T1f\n5427XhoSpZzdbi9XjlYZmFlQ08MYG18wTVa6g8MJ7qr9TIVZPRnSrtE15iP1\n8py3tXn97PToLd78ZkTfnlKZwrMxuFHcNCHMpVbEXD6zVWATeMMNRo5an3kg\ndE9+9odr2zZWdJgnN1PDwbGKeEEAEQEAAcLAXwQYAQgAEwUCVbtMgQkQI/2f\nPpsGdWkCGwwAAL2qCACSkHd3SDv1XTJJcwsazkXr+NMJaNSN7qQFPMboDS0Z\n3pX27Rn1ev1UHTqFKBYgogxyeUOnbeXE+VAFYuoeNCbFYY1TFhvGVWRax/rf\nPBuVQ4d1+g87nxSL3JFwvSGzTjPkJiU+rGOIkOqYK0JA/T8+ZqrXTQoH2d7i\nr1vldA2CakQ+Mf+BjHjG06doQlrbuGBYXLWJbATpcKmK++kWaGE01h5rFbx8\nJmS3SZME1N2bdm99TJVzbWbHqcJge/1lfEY1PecjweX2McXQEVGmZLPdN6dF\nHLrZ5SS/qnXSXE79odO4Cd/gx1nJrovmut1vZfxh3yyLOnh9+BZX/NeU9FWu\n\n=MMEa\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>'),e.put("templates/readme-pre.html",'<p><a href="https://travis-ci.org/Gaff/pgp.help"><img src="https://travis-ci.org/Gaff/pgp.help.svg?branch=master" alt="Build Status"></a></p>\n')}]);